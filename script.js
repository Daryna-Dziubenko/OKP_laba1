const colors = ['#ffb3ba', '#ffdfba', '#ffffba', '#baffc9', '#bae1ff'];
let isColorChanging = false;

function showPrompt() {
    const name = prompt("–í–≤–µ–¥—ñ—Ç—å —Å–≤–æ—î —ñ–º'—è:", "–°—É–ø–µ—Ä-–∫–æ–¥–µ—Ä");
    if (name) {
        const confirmMsg = `–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ —ñ–º'—è: ${name}?`;
        if(confirm(confirmMsg)) {
            showFloatingMessage(`–í—ñ—Ç–∞—î–º–æ, ${name}!`);
        } else {
            showFloatingMessage('–°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑!');
        }
    } else {
        showFloatingMessage('–Ü–º\'—è –æ–±–æ–≤\'—è–∑–∫–æ–≤–µ!');
    }
}

function dialogPass() {
    let isValid = false;
    let attempts = 0;
    
    while (!isValid && attempts < 5) {
        const password = prompt(`–°–ø—Ä–æ–± ${attempts+1}/5: –í–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å (–º—ñ–Ω—ñ–º—É–º 8 —Å–∏–º–≤–æ–ª—ñ–≤, –≤–µ–ª–∏–∫—ñ/–º–∞–ª—ñ –ª—ñ—Ç–µ—Ä–∏, —Ü–∏—Ñ—Ä–∏):`);
        const result = checkPassword(password);
        
        if (result.isValid) {
            isValid = true;
            showFloatingMessage('–ü–∞—Ä–æ–ª—å –ø—Ä–∏–π–Ω—è—Ç–æ!');
        } else {
            alert(result.message);
            attempts++;
        }
    }
    
    if (!isValid) {
        showFloatingMessage('–°–ø—Ä–æ–±—É–π –ø—ñ–∑–Ω—ñ—à–µ!');
    }
}

function checkPassword(password) {
    const requirements = [
        {test: p => p?.length >= 8, message: "–ú—ñ–Ω—ñ–º—É–º 8 —Å–∏–º–≤–æ–ª—ñ–≤"},
        {test: p => /[A-Z]/.test(p), message: "–ü–æ—Ç—Ä—ñ–±–Ω–∞ –≤–µ–ª–∏–∫–∞ –ª—ñ—Ç–µ—Ä–∞"},
        {test: p => /[a-z]/.test(p), message: "–ü–æ—Ç—Ä—ñ–±–Ω–∞ –º–∞–ª–∞ –ª—ñ—Ç–µ—Ä–∞"},
        {test: p => /\d/.test(p), message: "–ü–æ—Ç—Ä—ñ–±–Ω–∞ —Ü–∏—Ñ—Ä–∞"}
    ];

    for (const req of requirements) {
        if (!req.test(password)) {
            return {isValid: false, message: req.message};
        }
    }
    return {isValid: true, message: "–£—Å–ø—ñ—Ö!"};
}

function showDeveloperInfo() {
    const devInfo = `–†–æ–∑—Ä–æ–±–Ω–∏–∫: –î–∑—é–±–µ–Ω–∫–æ –î–∞—Ä–∏–Ω–∞\n–ü–æ—Å–∞–¥–∞: –°—Ç—É–¥–µ–Ω—Ç–∫–∞`;
    showFloatingMessage(devInfo);
}

function twoStr() {
    const str1 = prompt("–í–≤–µ–¥—ñ—Ç—å –ø–µ—Ä—à–∏–π —Ä—è–¥–æ–∫:");
    const str2 = prompt("–í–≤–µ–¥—ñ—Ç—å –¥—Ä—É–≥–∏–π —Ä—è–¥–æ–∫:");
    
    const resultElement = document.createElement('div');
    resultElement.className = 'string-comparison';
    
    if (str1 === str2) {
        resultElement.innerHTML = '–†—è–¥–∫–∏ —ñ–¥–µ–Ω—Ç–∏—á–Ω—ñ!';
        resultElement.style.color = '#2ecc71';
    } else {
        const longerStr = str1.length > str2.length ? str1 : str2;
        resultElement.innerHTML = `–ù–∞–π–¥–æ–≤—à–∏–π —Ä—è–¥–æ–∫: <span>${longerStr}</span>`;
        resultElement.querySelector('span').style.color = '#e74c3c';
    }
    
    document.body.appendChild(resultElement);
    setTimeout(() => resultElement.remove(), 3000);
}

function changeBg() {
    if (isColorChanging) return;
    isColorChanging = true;
    
    const body = document.body;
    let i = 0;
    
    const interval = setInterval(() => {
        body.style.backgroundColor = colors[i % colors.length];
        i++;
    }, 500);
    
    setTimeout(() => {
        clearInterval(interval);
        body.style.backgroundColor = '';
        isColorChanging = false;
    }, 3000);
}

function goTo() {
    if (confirm("–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ Wikipedia –ø—Ä–æ JavaScript?")) {
        window.open("https://uk.wikipedia.org/wiki/JavaScript", "_blank");
    }
}

function writeToDoc() {
    if (confirm("–û—á–∏—Å—Ç–∏—Ç–∏ –≤—Å—é —Å—Ç–æ—Ä—ñ–Ω–∫—É?")) {
        document.body.innerHTML = '<h1>–ù–æ–≤–∏–π –ø–æ—á–∞—Ç–æ–∫</h1>';
    }
}

function insertNode() {
    const createInteractiveElement = (text, color) => {
        const elem = document.createElement('p');
        elem.textContent = text;
        elem.style.cssText = `
            cursor: pointer;
            color: ${color};
            padding: 10px;
            border-radius: 5px;
            background: rgba(255,255,255,0.9);
            margin: 5px;
        `;
        return elem;
    };

    const elements = [
        createInteractiveElement('–ù–∞—Ç–∏—Å–Ω–∏ –º–µ–Ω–µ, —â–æ–± –∑–Ω–∏–∫–Ω—É—Ç–∏!', '#e74c3c'),
        createInteractiveElement('–Ø –∑–Ω–∏–∫–∞—é –ø—Ä–∏ –∫–ª—ñ–∫—É!', '#2ecc71'),
        createInteractiveElement('–í–∏–¥–∞–ª–∏—Ç–∏ –º–µ–Ω–µ', '#3498db')
    ];

    elements.forEach(el => {
        el.onclick = () => el.remove();
        document.body.append(el);
    });
}

// –£—Ç–∏–ª—ñ—Ç–∏
function showFloatingMessage(text) {
    const msg = document.createElement('div');
    msg.className = 'floating-message';
    msg.textContent = text;
    msg.style.cssText = `
        position: fixed;
        top: 20px;
        left: 50%;
        transform: translateX(-50%);
        background: white;
        padding: 15px 25px;
        border-radius: 30px;
        box-shadow: 0 5px 15px rgba(0,0,0,0.2);
        z-index: 1000;
        color: #333;
        font-weight: bold;
    `;

    document.body.appendChild(msg);
    setTimeout(() => msg.remove(), 3000);
}

// –°—Ç–∏–ª—ñ –±–µ–∑ –∞–Ω—ñ–º–∞—Ü—ñ–π
const style = document.createElement('style');
style.textContent = `
.string-comparison {
    position: fixed;
    bottom: 20px;
    left: 50%;
    transform: translateX(-50%);
    font-size: 1.2em;
    background: white;
    padding: 15px 30px;
    border-radius: 10px;
    box-shadow: 0 3px 10px rgba(0,0,0,0.1);
}
`;
document.head.appendChild(style);

function replaceAboutText() {
    const aboutText = document.querySelector('.about-text');
    
    if (aboutText) {
        const newContent = `
            <p>–ú–∏ - —Å—É—á–∞—Å–Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –Ω–∞–≤—á–∞–Ω–Ω—è –¥—ñ—Ç–µ–π –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—é —á–µ—Ä–µ–∑ —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è —Ç–∞ —ñ–≥—Ä–∏.</p>
            <p>–ù–∞—à—ñ –∫—É—Ä—Å–∏ —Ä–æ–∑—Ä–æ–±–ª–µ–Ω—ñ —Å–ø–µ—Ü—ñ–∞–ª—ñ—Å—Ç–∞–º–∏ –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –≤—ñ–∫–æ–≤–∏—Ö –æ—Å–æ–±–ª–∏–≤–æ—Å—Ç–µ–π –¥—ñ—Ç–µ–π.</p>
            <p>CodeKids ‚Äî —Ü–µ —à–∫–æ–ª–∞ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è –¥–ª—è –¥—ñ—Ç–µ–π —Ç–∞ –ø—ñ–¥–ª—ñ—Ç–∫—ñ–≤, —è–∫–∞ –¥–æ–ø–æ–º–∞–≥–∞—î —Ä–æ–∑–≤–∏–≤–∞—Ç–∏ –ª–æ–≥—ñ–∫—É, –∫—Ä–µ–∞—Ç–∏–≤–Ω—ñ—Å—Ç—å —Ç–∞ –Ω–∞–≤–∏—á–∫–∏ —Ä–æ–±–æ—Ç–∏ –≤ –∫–æ–º–∞–Ω–¥—ñ.</p>
        `;
        
        aboutText.innerHTML = newContent;
        alert("–û–ø–∏—Å —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ!");
    } else {
        alert("–ü–æ–º–∏–ª–∫–∞: –±–ª–æ–∫ –∑ –æ–ø–∏—Å–æ–º –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
    }
}

let testimonials = JSON.parse(localStorage.getItem('testimonials')) || [
    {
        id: 1,
        text: "–í–∏–±—ñ—Ä CodeKids –¥–ª—è –Ω–∞—à–æ—ó –¥–∏—Ç–∏–Ω–∏ –±—É–≤ –Ω–µ–π–º–æ–≤—ñ—Ä–Ω–æ –≤–¥–∞–ª–∏–º. –ü—Ä–æ–≥—Ä–∞–º–∞ –¥—É–∂–µ —Ü—ñ–∫–∞–≤–∞, –∫–æ–∂–µ–Ω —É—Ä–æ–∫ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –≤ —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ñ–π —Ñ–æ—Ä–º—ñ, —ñ —Å–∏–Ω –≤—ñ–¥—á—É–≤–∞—î —Å–µ–±–µ —Å–ø—Ä–∞–≤–∂–Ω—ñ–º —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–æ–º.",
        author: "–¢–µ—Ç—è–Ω–∞, –º–∞–º–∞ –ê–Ω–¥—Ä—ñ—è"
    },
    {
        id: 2,
        text: "–ú–æ—è –¥–æ–Ω—å–∫–∞ –≤ –∑–∞—Ö–≤–∞—Ç—ñ –≤—ñ–¥ –∑–∞–Ω—è—Ç—å! –í–æ–Ω–∞ –≤–∂–µ –∑—Ä–æ–±–∏–ª–∞ —Å–≤–æ—é –ø–µ—Ä—à—É –≥—Ä—É, —ñ –º–∏ –¥—É–∂–µ —Ä–∞–¥—ñ, —â–æ –æ–±—Ä–∞–ª–∏ CodeKids.",
        author: "–û–ª–µ–Ω–∞, –º–∞–º–∞ –°–æ—Ñ—ñ—ó"
    },
    {
        id: 3,
        text: "–î—É–∂–µ –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∏–π –ø—ñ–¥—Ö—ñ–¥! –ú—ñ–π —Å–∏–Ω –Ω–µ –ø—Ä–æ—Å—Ç–æ –Ω–∞–≤—á–∏–≤—Å—è –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞—Ç–∏, –∞ —â–µ –π –∑–Ω–∞–π—à–æ–≤ –Ω–æ–≤–∏—Ö –¥—Ä—É–∑—ñ–≤!",
        author: "–Ü–≥–æ—Ä, —Ç–∞—Ç–æ –ú–∞–∫—Å–∏–º–∞"
    }
];

function saveTestimonials() {
    localStorage.setItem('testimonials', JSON.stringify(testimonials));
}

function renderTestimonials() {
    const testimonialList = document.querySelector('.testimonial-list');
    if (!testimonialList) return;

    testimonialList.innerHTML = testimonials.map(t => `
        <div class="testimonial" data-testimonial-id="${t.id}">
            <p>¬´${t.text}¬ª</p>
            <span> - ${t.author}</span>
            <button class="delete-btn" data-action="deleteTestimonial" data-testimonial-id="${t.id}">üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏</button>
        </div>
    `).join('');
}

function addTestimonial() {
    const text = prompt("–í–≤–µ–¥—ñ—Ç—å –≤–∞—à –≤—ñ–¥–≥—É–∫:");
    const author = prompt("–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º'—è —Ç–∞ —Å—Ç–∞—Ç—É—Å (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –ê–Ω–Ω–∞, –º–∞–º–∞ –Ü–≤–∞–Ω–∞):");
    
    if (text && author) {
        const newTestimonial = {
            id: Date.now(), 
            text,
            author
        };
        testimonials.push(newTestimonial);
        saveTestimonials();
        
        const testimonialList = document.querySelector('.testimonial-list');
        const newElement = document.createElement('div');
        newElement.className = 'testimonial fade-in';
        newElement.dataset.testimonialId = newTestimonial.id;
        newElement.innerHTML = `
            <p>¬´${text}¬ª</p>
            <span> - ${author}</span>
            <button class="delete-btn" data-action="deleteTestimonial" data-testimonial-id="${newTestimonial.id}">üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏</button>
        `;
        testimonialList.appendChild(newElement);
        showFloatingMessage('–í—ñ–¥–≥—É–∫ –¥–æ–¥–∞–Ω–æ! üéâ');
    } else {
        showFloatingMessage('–ó–∞–ø–æ–≤–Ω—ñ—Ç—å —É—Å—ñ –ø–æ–ª—è! üòî');
    }
}

document.querySelector('.testimonials')
        .addEventListener('click', e => {
    const btn = e.target.closest('[data-action="deleteTestimonial"]');
    if (!btn) return;                           

    const id = btn.dataset.testimonialId;       
    deleteTestimonial(id);                      
});

function deleteTestimonial(id) {
    if (!confirm('–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ —Ü–µ–π –≤—ñ–¥–≥—É–∫?')) return;

    const el = document.querySelector(`[data-testimonial-id="${id}"]`);
    if (el) el.classList.add('fade-out');        

    setTimeout(() => {
        testimonials = testimonials.filter(t => t.id !== +id); 
        saveTestimonials();          
        renderTestimonials();        
        showFloatingMessage('–í—ñ–¥–≥—É–∫ –≤–∏–¥–∞–ª–µ–Ω–æ! üóëÔ∏è');
    }, 500);
}
function deleteTestimonial(id) {
    if (confirm('–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ —Ü–µ–π –≤—ñ–¥–≥—É–∫?')) {
        const testimonialElement = document.querySelector(`.testimonial[data-testimonial-id="${id}"]`);
        testimonialElement.classList.add('fade-out');
        setTimeout(() => {
            testimonials = testimonials.filter(t => t.id !== parseInt(id));
            saveTestimonials();
            renderTestimonials();
            showFloatingMessage('–í—ñ–¥–≥—É–∫ –≤–∏–¥–∞–ª–µ–Ω–æ! üóëÔ∏è');
        }, 500);
    }
}

document.addEventListener('DOMContentLoaded', () => {
    renderTestimonials();
});

function sayWelcome() {
    alert("–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ CodeKids! üéâ");
};

document.getElementById("opportunities").onclick = function() {
    alert("–ü—Ä–∏–≤—ñ—Ç –≤—ñ–¥ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ!");
};

let btn = document.getElementById("multiBtn");

btn.addEventListener("click", function() {
    console.log("–ü–µ—Ä—à–∏–π –æ–±—Ä–æ–±–Ω–∏–∫");
});

btn.addEventListener("click", function() {
    console.log("–î—Ä—É–≥–∏–π –æ–±—Ä–æ–±–Ω–∏–∫");
});

let handler = {
    handleEvent(event) {
        console.log("–û–±‚Äô—î–∫—Ç –æ–±—Ä–æ–±–∏–≤ –ø–æ–¥—ñ—é");
        console.log("–ï–ª–µ–º–µ–Ω—Ç:", event.currentTarget); 
    }
};

let objBtn = document.getElementById("objBtn");
objBtn.addEventListener("click", handler);

function handlerByAttribute() {
    alert('–û–±—Ä–æ–±–Ω–∏–∫ —á–µ—Ä–µ–∑ –∞—Ç—Ä–∏–±—É—Ç onclick!');
}

document.getElementById("teacher-list").onclick = function(event) {
    if(event.target.tagName === 'LI') {
        event.target.style.backgroundColor = "yellow";
    }
};

document.getElementById("menu-saved").onclick = function(event) {
    if (event.target.tagName !== 'BUTTON') return;

    let action = event.target.dataset.action;
    if (action) {
        methods[action](); 
    }
};

document.addEventListener('DOMContentLoaded', () => {
    const NOTE_KEY = 'codekids-note';

    const style = document.createElement('style');
    style.textContent = '.teacher.highlighted { background:#ffe082 }';
    document.head.append(style);

    const methods = {
        save() {
            const txt = document.getElementById('notes').value.trim();
            if (!txt) { alert('–ù—ñ—á–æ–≥–æ –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ üòÖ'); return; }
            localStorage.setItem(NOTE_KEY, txt);
            alert('‚úÖ –ù–æ—Ç–∞—Ç–∫—É –∑–±–µ—Ä–µ–∂–µ–Ω–æ');
        },

        search() {
            const q = prompt('–í–≤–µ–¥—ñ—Ç—å —ñ–º‚Äô—è –≤–∏–∫–ª–∞–¥–∞—á–∞:')
                      ?.trim()?.toLowerCase();
            if (!q) return;

            let found = 0;
            document.querySelectorAll('#teacher-list .teacher')
                .forEach(li => {
                    const hit = li.textContent.toLowerCase().includes(q);
                    li.classList.toggle('highlighted', hit);
                    if (hit) found++;
                });

            alert(found ? `–ó–Ω–∞–π–¥–µ–Ω–æ: ${found}` : '–ó–±—ñ–≥—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
        }
    };

    document.getElementById('menu-saved').addEventListener('click', e => {
        const btn = e.target.closest('button');
        if (!btn) return;

        const act = btn.dataset.action;
        if (methods[act]) methods[act]();
    });
});

